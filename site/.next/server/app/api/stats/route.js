"use strict";(()=>{var e={};e.id=961,e.ids=[961],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},5315:e=>{e.exports=require("path")},7694:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>E,patchFetch:()=>h,requestAsyncStorage:()=>c,routeModule:()=>u,serverHooks:()=>l,staticGenerationAsyncStorage:()=>m});var r={};a.r(r),a.d(r,{GET:()=>p});var s=a(9303),i=a(8716),n=a(670),d=a(7070),o=a(1181);async function p(e){let t=new o.k;try{let e=await t.getStats();return d.NextResponse.json({stats:e})}catch(e){return console.error("Error fetching stats:",e),d.NextResponse.json({error:"Failed to fetch stats"},{status:500})}finally{await t.close()}}let u=new s.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/stats/route",pathname:"/api/stats",filename:"route",bundlePath:"app/api/stats/route"},resolvedPagePath:"/Users/jaenster/code/claude/mpc-mindport/site/app/api/stats/route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:c,staticGenerationAsyncStorage:m,serverHooks:l}=u,E="/api/stats/route";function h(){return(0,n.patchFetch)({serverHooks:l,staticGenerationAsyncStorage:m})}},1181:(e,t,a)=>{a.d(t,{k:()=>o});let r=require("sqlite3");var s=a.n(r);let i=require("util");var n=a(5315);let d=require("os");class o{constructor(e){let t=n.join(d.homedir(),".config","mindport","data","storage.db");this.db=new(s()).Database(e||t),this.dbGet=(0,i.promisify)(this.db.get.bind(this.db)),this.dbAll=(0,i.promisify)(this.db.all.bind(this.db))}async listDomains(){return(await this.dbAll(`
      SELECT 
        d.name,
        d.description,
        d.created_at,
        COUNT(r.id) as resource_count
      FROM domains d
      LEFT JOIN resources r ON d.name = r.domain
      GROUP BY d.name, d.description, d.created_at
      ORDER BY d.name
    `)).map(e=>({name:e.name,description:e.description,resourceCount:e.resource_count,createdAt:new Date(e.created_at)}))}async listResources(e,t,a,r){let s="SELECT * FROM resources WHERE 1=1",i=[];if(e&&(s+=" AND domain = ?",i.push(e)),r){s+=" AND (name LIKE ? OR description LIKE ? OR content LIKE ?)";let e=`%${r}%`;i.push(e,e,e)}return s+=" ORDER BY updated_at DESC",t&&(s+=" LIMIT ?",i.push(t),a&&(s+=" OFFSET ?",i.push(a))),(await this.dbAll(s,...i)).map(e=>({id:e.id,name:e.name,description:e.description,content:e.content,tags:JSON.parse(e.tags||"[]"),domain:e.domain,mimeType:e.mime_type,uri:e.uri,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at)}))}async getResource(e){let t=await this.dbGet("SELECT * FROM resources WHERE id = ?",e);return t?{id:t.id,name:t.name,description:t.description,content:t.content,tags:JSON.parse(t.tags||"[]"),domain:t.domain,mimeType:t.mime_type,uri:t.uri,createdAt:new Date(t.created_at),updatedAt:new Date(t.updated_at)}:null}async listPrompts(e){let t="SELECT * FROM prompts",a=[];return e&&(t+=" WHERE domain = ?",a.push(e)),t+=" ORDER BY updated_at DESC",(await this.dbAll(t,...a)).map(e=>({id:e.id,name:e.name,description:e.description,template:e.template,variables:JSON.parse(e.variables||"[]"),domain:e.domain,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at)}))}async getPrompt(e){let t=await this.dbGet("SELECT * FROM prompts WHERE id = ?",e);return t?{id:t.id,name:t.name,description:t.description,template:t.template,variables:JSON.parse(t.variables||"[]"),domain:t.domain,createdAt:new Date(t.created_at),updatedAt:new Date(t.updated_at)}:null}async getStats(){let[e,t,a]=await Promise.all([this.dbGet("SELECT COUNT(*) as count FROM resources"),this.dbGet("SELECT COUNT(*) as count FROM prompts"),this.dbGet("SELECT COUNT(*) as count FROM domains")]),r=await this.listResources(void 0,5);return{totalResources:e.count,totalPrompts:t.count,totalDomains:a.count,recentResources:r}}close(){return new Promise((e,t)=>{this.db.close(a=>{a?t(a):e()})})}}}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[276,972],()=>a(7694));module.exports=r})();